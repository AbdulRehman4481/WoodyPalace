// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin User model
model AdminUser {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String
  role         String    @default("ADMIN")
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  auditLogs AuditLog[]

  @@map("admin_users")
}

// Product model
model Product {
  id                String   @id @default(cuid())
  name              String
  description       String?
  price             Decimal  @db.Decimal(10, 2)
  sku               String   @unique
  inventoryQuantity Int      @default(0)
  isActive          Boolean  @default(true)
  isDiscontinued    Boolean  @default(false)
  images            String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  productCategories ProductCategory[]
  orderItems        OrderItem[]

  @@map("products")
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  image       String?   // Category image URL
  parentId    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Self-referencing relation
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Relations
  productCategories ProductCategory[]

  @@map("categories")
}

// Product-Category junction table
model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

// Customer model
model Customer {
  id          String    @id @default(cuid())
  email       String    @unique
  firstName   String
  lastName    String
  phone       String?
  address     Json? // Embedded address object
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  orders     Order[]

  @@map("customers")
}

// Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerId      String
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  taxAmount       Decimal     @db.Decimal(10, 2)
  shippingAmount  Decimal     @db.Decimal(10, 2)
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAddress Json        // Embedded address object
  billingAddress  Json        // Embedded address object
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  customer  Customer   @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

// Order Item model
model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String
  productName     String
  productSku      String
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  totalPrice      Decimal  @db.Decimal(10, 2)
  isDiscontinued  Boolean  @default(false)
  createdAt       DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Audit Log model
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  oldValues   Json?
  newValues   Json?
  adminUserId String
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  adminUser AdminUser @relation(fields: [adminUserId], references: [id])

  @@map("audit_logs")
}

// Enums
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
