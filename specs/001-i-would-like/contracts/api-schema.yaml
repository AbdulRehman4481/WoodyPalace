openapi: 3.0.3
info:
  title: E-Commerce Admin Panel API
  description: API specification for e-commerce admin panel built with Next.js 15
  version: 1.0.0
  contact:
    name: Admin Panel API
    email: admin@example.com

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://admin.example.com/api
    description: Production server

security:
  - bearerAuth: []

paths:
  # Authentication
  /auth/login:
    post:
      summary: Admin login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/AdminUser'
                  token:
                    type: string
        '401':
          description: Invalid credentials
        '400':
          description: Validation error

  /auth/logout:
    post:
      summary: Admin logout
      tags: [Authentication]
      responses:
        '200':
          description: Logout successful

  # Products
  /products:
    get:
      summary: Get all products
      tags: [Products]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, discontinued]
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create new product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
        '409':
          description: SKU already exists

  /products/{id}:
    get:
      summary: Get product by ID
      tags: [Products]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      summary: Update product
      tags: [Products]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
        '404':
          description: Product not found

    delete:
      summary: Delete product
      tags: [Products]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
        '409':
          description: Cannot delete product with existing orders

  # Categories
  /categories:
    get:
      summary: Get all categories
      tags: [Categories]
      parameters:
        - name: includeInactive
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Create new category
      tags: [Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Validation error
        '409':
          description: Slug already exists

  /categories/{id}:
    get:
      summary: Get category by ID
      tags: [Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    put:
      summary: Update category
      tags: [Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Validation error
        '404':
          description: Category not found

    delete:
      summary: Delete category
      tags: [Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
        '409':
          description: Cannot delete category with assigned products

  # Orders
  /orders:
    get:
      summary: Get all orders
      tags: [Orders]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
        - name: customerId
          in: query
          schema:
            type: string
            format: uuid
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /orders/{id}:
    get:
      summary: Get order by ID
      tags: [Orders]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    put:
      summary: Update order status
      tags: [Orders]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
                notes:
                  type: string
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Validation error
        '404':
          description: Order not found

  # Customers
  /customers:
    get:
      summary: Get all customers
      tags: [Customers]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /customers/{id}:
    get:
      summary: Get customer by ID
      tags: [Customers]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found

    put:
      summary: Update customer
      tags: [Customers]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Validation error
        '404':
          description: Customer not found

  # Analytics
  /analytics/sales:
    get:
      summary: Get sales analytics
      tags: [Analytics]
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Sales analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesAnalytics'

  /analytics/inventory:
    get:
      summary: Get inventory analytics
      tags: [Analytics]
      responses:
        '200':
          description: Inventory analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryAnalytics'

  # Data Export
  /export/products:
    get:
      summary: Export products data
      tags: [Export]
      parameters:
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [csv, json]
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Export successful
          content:
            text/csv:
              schema:
                type: string
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /export/orders:
    get:
      summary: Export orders data
      tags: [Export]
      parameters:
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [csv, json]
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Export successful
          content:
            text/csv:
              schema:
                type: string
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AdminUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [ADMIN]
        isActive:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
        sku:
          type: string
        inventoryQuantity:
          type: integer
        isActive:
          type: boolean
        isDiscontinued:
          type: boolean
        images:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateProductRequest:
      type: object
      required: [name, price, sku, inventoryQuantity]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 200
        description:
          type: string
        price:
          type: number
          format: decimal
          minimum: 0
        sku:
          type: string
          minLength: 3
          maxLength: 50
        inventoryQuantity:
          type: integer
          minimum: 0
        images:
          type: array
          items:
            type: string
        categoryIds:
          type: array
          items:
            type: string
            format: uuid

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 200
        description:
          type: string
        price:
          type: number
          format: decimal
          minimum: 0
        sku:
          type: string
          minLength: 3
          maxLength: 50
        inventoryQuantity:
          type: integer
          minimum: 0
        isActive:
          type: boolean
        images:
          type: array
          items:
            type: string
        categoryIds:
          type: array
          items:
            type: string
            format: uuid

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        parentId:
          type: string
          format: uuid
        isActive:
          type: boolean
        sortOrder:
          type: integer
        children:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCategoryRequest:
      type: object
      required: [name, slug]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
        slug:
          type: string
          minLength: 2
          maxLength: 100
        parentId:
          type: string
          format: uuid
        sortOrder:
          type: integer
          minimum: 0

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
        slug:
          type: string
          minLength: 2
          maxLength: 100
        parentId:
          type: string
          format: uuid
        isActive:
          type: boolean
        sortOrder:
          type: integer
          minimum: 0

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderNumber:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        subtotal:
          type: number
          format: decimal
        taxAmount:
          type: number
          format: decimal
        shippingAmount:
          type: number
          format: decimal
        totalAmount:
          type: number
          format: decimal
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        paymentStatus:
          type: string
          enum: [pending, paid, failed, refunded]
        notes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productName:
          type: string
        productSku:
          type: string
        quantity:
          type: integer
        unitPrice:
          type: number
          format: decimal
        totalPrice:
          type: number
          format: decimal
        isDiscontinued:
          type: boolean

    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        isActive:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        orderCount:
          type: integer
        totalSpent:
          type: number
          format: decimal
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateCustomerRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          minLength: 2
          maxLength: 50
        phone:
          type: string
          minLength: 10
          maxLength: 20
        address:
          $ref: '#/components/schemas/Address'
        isActive:
          type: boolean

    Address:
      type: object
      required: [street, city, state, postalCode, country]
      properties:
        street:
          type: string
          minLength: 5
          maxLength: 200
        city:
          type: string
          minLength: 2
          maxLength: 100
        state:
          type: string
          minLength: 2
          maxLength: 50
        postalCode:
          type: string
          minLength: 5
          maxLength: 20
        country:
          type: string
          minLength: 2
          maxLength: 50

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    SalesAnalytics:
      type: object
      properties:
        period:
          type: string
        totalRevenue:
          type: number
          format: decimal
        totalOrders:
          type: integer
        averageOrderValue:
          type: number
          format: decimal
        topProducts:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              productName:
                type: string
              quantitySold:
                type: integer
              revenue:
                type: number
                format: decimal
        dailyData:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              revenue:
                type: number
                format: decimal
              orders:
                type: integer

    InventoryAnalytics:
      type: object
      properties:
        totalProducts:
          type: integer
        activeProducts:
          type: integer
        lowStockProducts:
          type: integer
        outOfStockProducts:
          type: integer
        totalInventoryValue:
          type: number
          format: decimal
        lowStockAlerts:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              productName:
                type: string
              sku:
                type: string
              currentStock:
                type: integer
              minimumThreshold:
                type: integer

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time
